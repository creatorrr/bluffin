<?xml version="1.0" encoding="UTF-8"?>

<Module>

  <!-- Set preferences for app -->
  <ModulePrefs title="Keep Bluffin">
    <Require feature="rpc" />
    <Require feature="views" />
    <Require feature="locked-domain" />
  </ModulePrefs>

  <!-- Begin app logic -->
  <Content type="html">
    <![CDATA[
    <html>
      <head>
        <script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/thorax/2.0.0rc6/thorax.js"></script>

        <!-- App logic -->
        <script type="text/javascript">
          // App module
          (function($, _, Thorax, Backbone){
          var app, Card, Deck, forwardEvents, rewriteDataInterface, rewriteSync, Players, Player;

            // Tidy up the gapi events interface
            forwardEvents = function(self) {
              if(!self) self = this;

              var capitalize = function(str) {
                return str[0].toUpperCase() + _.rest(str).join('');
              }

              return {
                on: function(name, fn) {
                  self['on'+capitalize(name)].add(fn);
                },

                off: function(name, fn) {
                  self['on'+capitalize(name)].remove(fn);
                }
              }
            }

            // Rewrite data interface
            rewriteDataInterface = function(self) {
              if(!self) self = this;

              return {
                clear: function(key) {
                  if(key !== void 0) {
                    // Simply forward function call
                    return self.clearValue( key );

                  } else {
                    // Clear all
                    var keys = self.getKeys();
                    for(var i; i < keys.length; i++) self.clearValue( keys[i] );
                  }
                }

                get: function(key) {
                  if(key != null) {
                    // Forward call
                    return self.getValue( key );

                  } else {
                    // Get all
                    return self.getState();
                  }
                }

                set: function(key, value) {
                  if(Object(key) === key) {
                    for(var k in key) self.setValue( k, key[k] );
                    return true;

                  } else {
                    return self.getValue( key, value );
                  }
                }
              }
            }

            // App namespace
            app = _.extend({
              hangout: _.extend(gapi.hangout, forwardEvents(gapi.hangout)),
              data: _.extend(gapi.hangout.data, rewriteDataInterface(gapi.hangout.data)),

              state: {}   // For storing app state
            }, Backbone.Events);

            // Rewrite Backbone Sync
            (rewriteSync = function(Backbone, store) {

              // Cache a reference to original sync function
              Backbone.ajaxSync = Backbone.sync;

              // Rewrite sync to use local state cache
              Backbone.sync = function(method, model, options) {
                var key, isCollection, url, resp, data, errorMessage;

                options || options = {};
                url = options.url || _.result(model, 'url');

                if(model instanceof Backbone.Model) {
                  key = _.first(url.split('/'));

                } else {
                  // Get collection endpoint
                  key = url;
                  isCollection = true;
                }

                try {
                  switch (method) {
                    case 'read':
                      resp = state[key];

                      // Lookup model
                      if(!isCollection)
                        resp = _.findWhere(resp, {id: model.id});

                      break;

                    case 'create':
                    case 'update':
                      data = model.toJSON();

                      if(isCollection) {
                        // Add to shared state and then make a local copy
                        app.data.set(key, data) && state[key] = data;

                      } else {
                        var coll = app.data.get(key) || [];

                        // Append data to collection and save it
                        coll.push(data);
                        app.data.set(key, coll) && app.state[key] = coll;
                      }

                      // Generate response
                      resp = coll;
                      break;

                    case 'delete':
                      app.data.clear(key);
                      delete app.state[key];

                      resp = true;
                      break;
                  }
                } catch(error) {
                  // Twiddle thumbs for a bit
                  errorMessage = error.message || 'Storage error';
                }

                // Send response
                if(resp && options.success)
                  _.defer(options.success, resp);

                else if(errorMessage && options.error)
                  _.defer(options.error, errorMessage);

                return resp || errorMessage;
              }
            })(Backbone, app.state);

            // Define a Card Model
            Card = Thorax.Model.extend({});

            // Define Deck
            Deck = Thorax.Collection.extend({
              model: Card,

              // Distribute deck among players
              distribute: function(players) {
                var shuffled, sets, slice;

                shuffled = this.shuffle();
                sets = [];

                slice = shuffled.length / players;

                for(var i = 0; i < shuffled.length; i += slice)
                  sets.push(shuffled.slice(i, i + slice);

                return sets;
              }
            });

            // Initialize a deck.
            app.deck = new Deck();
            app.deck.add((function(){
              var i, j, suits, ranks, cards;

              suits = ['hearts', 'spades', 'diamonds', 'clubs'];
              ranks = ['A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'];

              cards = [];

              // Add all 52 cards
              for (i = 0; i < suits.length; i++)
                for (j = 0; i < ranks.length; j++)
                  cards.push({
                    rank: ranks[j],
                    suit: suits[i]
                  });

              return cards;
            })());

            // Define player model
            Player = Throax.Model.extend({
              isMaster: function() {
                return this.id = app.state['master'];
              }
            });

            Players = Thorax.Collection.extend({
              model: Player,
              getMaster: function() {
                return this.find(function(model) { return model.isMaster() });
              }
            });

            // Init
            $(function(){
              // Initialize local player
              app.me = new Player();
              app.players = new Players()

              // Set up app
              app.hangout.on('apiReady', function(){

                // Send and receive messages
                app.data.on('messageReceived', function(message) {
                  // Parse message
                  message = JSON.parse(message) || message;

                  // If not addressed to any id, then broadcast.
                  if(!(var to = _.result(message, 'to'))) {
                    app.trigger('broadcast:received', message);

                  } else if(to == app.me.id) {
                    app.trigger('message:received', message);
                  }
                });

                app.on('message:send', function(id, message) {
                  // Add metadata
                  if(Object(message) === message) {
                    message.to = id;
                    message.from = app.me.id;
                  }

                  app.data.sendMessage(JSON.stringify(message));
                });

                app.on('broadcast:send', function(message) {
                  app.data.sendMessage(JSON.stringify(message));
                }

                // Auto update internal state
                app.data.on('stateChanged', function(e) {
                  app.state = _.clone(e.state);
                  app.trigger('state:change', app.state);
                }

                app.on('state:refresh', function() {
                  app.state = _.clone(app.data.getState());
                });

                // Add local players
                app.me.set(app.hangout.getLocalParticipant());

                app.players.reset(app.hangout.getEnabledParticipants());
                app.hangout.on('participantsEnabled', function(participants) {
                  app.players.reset(participants);
                });

                // Do stuff here

              });
            });

          }).call(this, jQuery, _, Thorax, Backbone);
        </script>
        <style type="text/css"
          * {margin: 0; padding: 0;}

          body {
            background: #00a651;
          }

          /* Card styles (Copied shamelessly from http://designshack.net/articles/css/css-card-tricks/) */
          .hand:before,
          .hand:after {
            content:"";
            display:table;
          }

          .hand:after {
            clear:both;
          }

          .card {
            position: relative;
            float: left;
            margin-right: 10px;
            width: 150px;
            height: 220px;
            border-radius: 10px;
            background: white;
            -webkit-box-shadow: 3px 3px 7px rgba(0,0,0,0.3);
            box-shadow: 3px 3px 7px rgba(0,0,0,0.3);
          }

          .card p {
            text-align: center;
            text-transform: capitalize;
            color: black;
            font: 100px/220px Georgia, serif;
          }

          .suitdiamonds p,
          .suithearts p {
            color: #ff0000;
          }

          .suitdiamonds:before, .suitdiamonds:after {
            content: "♦";
            color: #ff0000;
           }

          .suithearts:before, .suithearts:after {
            content: "♥";
            color: #ff0000;
          }

          .suitclubs:before, .suitclubs:after {
            content: "♣";
            color: #000;
          }

          .suitspades:before, .suitspades:after {
            content: "♠";
            color: #000;
          }

          div[class*='suit']:before {
            position: absolute;
            font-size: 35px;
            left: 5px;
            top: 5px;
          }

          div[class*='suit']:after {
            position: absolute;
            font-size: 35px;
            right: 5px;
            bottom: 5px;
          }

          .card:hover {
            cursor: pointer;

            -webkit-box-shadow: 1px 1px 7px rgba(0,0,0,0.4);
            box-shadow: 1px 1px 7px rgba(0,0,0,0.4);
          }
        </style>
      </head>

      <body>
      </body>

    </html>
    ]]>
  </Content>

</Module>

